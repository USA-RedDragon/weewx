# spec for building a weewx rpm for redhat or suse systems
# License: GPLv3
# Author: (c) 2013-2023 Matthew Wall

# the operating system release number is specified externaly, so that we can
# do cross-release (but not cross-platform) packaging.
%define os_target OSREL
%global relnum RPMREVISION
%define weewx_version WEEWX_VERSION

# suse 15: python3
%if 0%{?suse_version} && "%{os_target}" == "15"
%define app_group Productivity/Scientific/Other
%define relos .suse15
%define platform suse
%define deps python3, python3-importlib_resources, python3-configobj, python3-Cheetah3, python3-Pillow, python3-pyserial, python3-usb
%define python python3
%define html_root /var/www/html/weewx
%define systemd_dir /usr/lib/systemd/system
%define udev_dir /usr/lib/udev/rules.d
%endif

# rh: python3 on redhat, fedora, centos, rocky
%if "%{_vendor}" == "redhat"
%define app_group Applications/Science
%define platform redhat
%define html_root /var/www/html/weewx
%define systemd_dir /lib/systemd/system
%define udev_dir /lib/udev/rules.d
# disable shebang mangling. see https://github.com/atom/atom/issues/21937
%undefine __brp_mangle_shebangs
%if "%{os_target}" == "8"
%define relos .el8
# rh8 ships with python 3.6, which has pre-built modules required by weewx.
# weewx also requires the importlib.resource module from python 3.7, which is
# backported to python 3.6.  python 3.8, python 3.9, and python 3.11 are also
# available on rh8, but none of the modules required by weewx are available for
# those python (as of nov2023).
%define deps epel-release, python3, python3-importlib-resources, python3-configobj, python3-cheetah, python3-pillow, python3-pyserial, python3-pyusb
%define python python3
%endif
%if "%{os_target}" == "9"
%define relos .el9
# rh9 ships with python 3.9, which has pre-built modules required by weewx.
%define deps python3, python3-configobj, python3-cheetah, python3-pillow, python3-pyserial, python3-pyusb
%define python python3
%endif
%endif

%global release %{relnum}%{?relos:%{relos}}

%global dst_code_dir %{_datadir}/weewx
%global dst_cfg_dir  %{_sysconfdir}/weewx
%global dst_user_dir %{dst_cfg_dir}/bin/user
%global dst_doc_dir  %{_datadir}/weewx-doc
%global cfg_file     %{dst_cfg_dir}/weewx.conf

%define entry_points weewxd weectl
%define weewx_user weewx
%define weewx_group weewx

Summary: weather software
Name: weewx
Version: %{weewx_version}
Release: %{release}
Group: %{app_group}
Source: %{name}-%{version}.tar.gz
URL: https://www.weewx.com
License: GPLv3
AutoReqProv: no
Requires: %{deps}
Requires(pre): /usr/bin/getent, /usr/sbin/groupadd, /usr/sbin/useradd
BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-%(%{__id_u} -n)
BuildArch: noarch

%description
weewx interacts with a weather station to produce graphs, reports, and HTML
pages. weewx can upload data to weather services such as WeatherUnderground,
PWSweather.com, or CWOP.

%prep
%setup -q

%build

%install
rm -rf %{buildroot}
mkdir -p %{buildroot}%{_bindir}
mkdir -p %{buildroot}%{dst_code_dir}
mkdir -p %{buildroot}%{dst_cfg_dir}
mkdir -p %{buildroot}%{dst_user_dir}
mkdir -p %{buildroot}%{dst_doc_dir}
mkdir -p %{buildroot}/etc/default
mkdir -p %{buildroot}%{systemd_dir}
mkdir -p %{buildroot}%{udev_dir}
mkdir -p %{buildroot}/var/lib/weewx
mkdir -p %{buildroot}/var/www/html/weewx

# rpm wants copyright and license even if no docs
cp docs_src/copyright.md %{buildroot}%{dst_doc_dir}/copyright
cp LICENSE.txt %{buildroot}%{dst_doc_dir}/license

# copy the weewx code
cp -r src/* %{buildroot}%{dst_code_dir}

# create the user extensions directory
cp src/weewx_data/bin/user/__init__.py %{buildroot}%{dst_user_dir}
cp src/weewx_data/bin/user/extensions.py %{buildroot}%{dst_user_dir}

# copy the ancillary files to the correct location
cp -r src/weewx_data/examples %{buildroot}%{dst_cfg_dir}
cp -r src/weewx_data/skins %{buildroot}%{dst_cfg_dir}
cp -r src/weewx_data/util/import %{buildroot}%{dst_cfg_dir}
cp -r src/weewx_data/util/logwatch %{buildroot}%{dst_cfg_dir}
cp -r src/weewx_data/util/rsyslog.d %{buildroot}%{dst_cfg_dir}
cp -r src/weewx_data/util/logrotate.d %{buildroot}%{dst_cfg_dir}

# create the weewx configuration
cat src/weewx_data/weewx.conf | sed \
 -e 's%^WEEWX_ROOT =.*%WEEWX_ROOT = /etc/weewx%' \
 -e 's%SKIN_ROOT =.*%SKIN_ROOT = /etc/weewx/skins%' \
 -e 's:HTML_ROOT = public_html:HTML_ROOT = %{html_root}:' \
 -e 's%SQLITE_ROOT = .*%SQLITE_ROOT = /var/lib/weewx%' \
 > %{buildroot}%{dst_cfg_dir}/weewx.conf

# make a copy of the generic configuration file
cp %{buildroot}%{dst_cfg_dir}/weewx.conf %{buildroot}%{dst_cfg_dir}/weewx.conf-%{weewx_version}

# create the init configuration
cp pkg/etc/systemd/system/weewx.service %{buildroot}%{systemd_dir}
cp pkg/etc/systemd/system/weewx@.service %{buildroot}%{systemd_dir}

# create the entry points
for f in %{entry_points}; do \
  cat bin/$f | sed \
   -e 's%WEEWX_BINDIR=.*%WEEWX_BINDIR=/usr/share/weewx%' \
   -e 's%WEEWX_PYTHON=.*%WEEWX_PYTHON=%{python}%' \
   > %{buildroot}%{_bindir}/$f; \
done

# configure defaults
cat pkg/etc/default/weewx | sed \
 -e 's%WEEWX_PYTHON=.*%WEEWX_PYTHON=%{python}%' \
 > %{buildroot}/etc/default/weewx

# udev rules for known devices
cp pkg/etc/udev/rules.d/weewx.rules %{buildroot}%{udev_dir}/60-weewx.rules

# log handling


%pre
if [ "$1" = "2" ]; then
  # this is an upgrade
  if [ -f %{cfg_file} ]; then
    echo Saving previous config as %{cfg_file}.prev
    cp -p %{cfg_file} %{cfg_file}.prev
  fi
fi
# create the weewx user and group
/usr/bin/getent group %{weewx_group} || /usr/sbin/groupadd -r %{weewx_group}
/usr/bin/getent passwd %{weewx_user} || /usr/sbin/useradd -r -g %{weewx_group} -M -s /sbin/nologin %{weewx_user}

%post
# see which init system (if any) is running
pid1=none
if [ -d /run/systemd/system ]; then
  pid1=systemd
fi
# restart syslog so that it picks up the weewx logging directives
if [ -f /run/rsyslogd.pid ]; then
  if [ "$pid1" = "systemd" ]; then
    systemctl restart rsyslog
  fi
fi
# pre-compile the python code
echo Precompile using %{python} in %{dst_code_dir}
%{python} -m compileall %{dst_code_dir} > /dev/null
if [ "$1" = "1" ]; then
  # this is a new installation
  # create a sane configuration file with simulator as the station type
  /usr/bin/weectl station reconfigure --config=%{cfg_file} --driver=weewx.drivers.simulator --no-prompt --no-backup
  if [ "$pid1" = "systemd" ]; then
    systemctl enable weewx
    systemctl start weewx
  fi
elif [ "$1" = "2" ]; then
  # this is an upgrade
  # upgrade a copy of the previous config to create the upgraded version, but
  # do not touch the user's configuration.
  #   weewx.conf          - user's conf (old)
  #   weewx.conf-new      - new conf for this weewx version
  #   weewx.conf-old-new  - user's conf upgraded to this weewx version
  #   weewx.conf.rpmnew   - new conf from this rpm (created by rpm rules)
  if [ -f %{cfg_file}.prev ]; then
    OLDVER=`grep version %{cfg_file}.prev | sed -e 's/\s*version\s*=\s*//'`
    if [ "$OLDVER" = "" ]; then
      # someone might have messed with the version string
      OLDVER="xxx"
    fi
    MNT=${OLDVER}-%{weewx_version}
    echo Copying previous config file to %{cfg_file}-$MNT
    cp -p %{cfg_file}.prev %{cfg_file}-$MNT
    if [ -f %{cfg_file}-%{weewx_version} ]; then
      echo Creating maintainer config file as %{cfg_file}-$MNT
      /usr/bin/weectl station upgrade --config=%{cfg_file}-$MNT --dist-config=%{cfg_file}-%{weewx_version} --what=config --no-prompt --no-backup
    fi
  fi
  # if this is an upgrade from V4, copy any extensions to the V5 location
  if [ -d /usr/share/weewx/user ]; then
    echo "Copying old extensions to /etc/weewx/bin/user"
    cp -rp /usr/share/weewx/user/* /etc/weewx/bin/user
    ts=`/usr/bin/date +"%%Y%%m%%d%%H%%M%%S"`
    echo "Moving old extensions to /usr/share/weewx/user-$ts"
    mv /usr/share/weewx/user /usr/share/weewx/user-$ts
  fi
  # do a full restart of weewx
  if [ "$pid1" = "systemd" ]; then
    systemctl stop weewx
    systemctl start weewx
  fi
fi

%preun
# see which init system (if any) is running
pid1=none
if [ -d /run/systemd/system ]; then
  pid1=systemd
fi

if [ "$1" = "0" ]; then
  # this is an uninstall, so stop and remove everything
  if [ "$pid1" = "systemd" ]; then
    systemctl stop weewx
    systemctl disable weewx
  fi
  # remove any bytecompiled code
  find /usr/share/weewx -name '*.pyc' -delete
  find /usr/share/weewx -name __pycache__ -delete
  find /etc/weewx/bin -name '*.pyc' -delete
  find /etc/weewx/bin -name __pycache__ -delete
fi
# otherwise this is an upgrade (1), so do nothing

%clean
rm -rf %{buildroot}

%files
%defattr(-,root,root)
%attr(0755,root,root) %{_bindir}/weewxd
%attr(0755,root,root) %{_bindir}/weectl
%{systemd_dir}/weewx.service
%{systemd_dir}/weewx@.service
%{udev_dir}/60-weewx.rules
%{dst_code_dir}/
%doc %{dst_doc_dir}/
%config(noreplace) %{_sysconfdir}/default/weewx
%defattr(664,%{weewx_user},%{weewx_group},2775)
%config(noreplace) %{dst_cfg_dir}/
%dir %attr(2775,%{weewx_user},%{weewx_group}) /var/lib/weewx
%dir %attr(2775,%{weewx_user},%{weewx_group}) /var/www/html/weewx

%changelog
